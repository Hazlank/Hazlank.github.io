<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hazlank blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-09T14:32:13.053Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hazlank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原型</title>
    <link href="http://yoursite.com/2017/09/09/prototype/"/>
    <id>http://yoursite.com/2017/09/09/prototype/</id>
    <published>2017-09-09T03:15:51.000Z</published>
    <updated>2017-09-09T14:32:13.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型，原型链，继承"><a href="#原型，原型链，继承" class="headerlink" title="原型，原型链，继承"></a>原型，原型链，继承</h1><p>最近在看js高级程序设计，以前对prototype不了解，重新看完书后得到了很多东西不止是原型这块知识点，还有一些细节点，写法上的性能优化、一些方法的处理机制，这里就不说明了。就来把自己所知道的原型来梳理一下吧  </p>
<h2 id="一丶原型是什么"><a href="#一丶原型是什么" class="headerlink" title="一丶原型是什么"></a>一丶原型是什么</h2><ul>
<li><p>在js里，万物皆对象，Function也是对象，在使用字面量创建基本类型的时候也会实例化成一个对象。  我们在创建对象的时候可以看到，对象里会有一个属性__proto__，可称为隐式原型。  </p>
</li>
<li><p>在函数(Function)这个对象中，还有一个特有的属性，prototype(显式原型)。函数的prototype是一个指针，指向一个对象。</p>
</li>
</ul>
<pre>
function a(){};
a.prototype={};
new a().__proto__ === a.prototype; //true
</pre>

<p>这里就能知道一个对象的隐式原型指向和构造该对象的构造函数的原型的指向是一样的，这样就保证了能够访问到构造函数原型时定义的方法了。在对象__proto__属性里能看到里面有许多的方法还有一个属性constructor，指向我们的构造函数。  </p>
<h2 id="二丶继承"><a href="#二丶继承" class="headerlink" title="二丶继承"></a>二丶继承</h2><p>js没有现有的继承的机制，但是可以通过其他的方式来实现继承，比如常见的类式继承，利用原型的特性实现继承</p>
<h3 id="1-类式继承"><a href="#1-类式继承" class="headerlink" title="1.类式继承"></a>1.类式继承</h3><pre>
function SuperClass(){
  this.val=true    
};
SuperClass.prototype.getVal=function(){
  console.log(this.val)
}
SuperClass.prototype.o={
  a:1
}

function SubClass(){
  this.val=false
}

SubClass.prototype=new SuperClass();
SubClass.prototype.constructor=SubClass;
var sub1=new SubClass();
sub1.getVal(); //false;
sub1.o.a=2;

console.log(new SubClass().o.a)//2
</pre>

<p>类的原型对象的作用就是为类的原型添加共有方法。当子类的原型对象指向实例化一个父类的时候，再去实例化这个子类的时候，实例化后的对象里的__proto__就是我们父类的prototype对象，所以就能够访问到父类原型对象的方法和构造属性了。<br>但是有个缺点，因为prototype是指向对象，对象和基本值不一样，是引用，所以我们更改其中的属性也就是相当于更改父类的属性，就会相互影响。<br>当然也可以通过父类的原型对象for-in循环复制到子类里，只要加上hasownproperty的判断就好啦。</p>
<h3 id="2-构造函数继承"><a href="#2-构造函数继承" class="headerlink" title="2.构造函数继承"></a>2.构造函数继承</h3><p>js是灵活的，我们可以使用其他继承方式来解决引用问题，比如常见的构造函数继承</p>
<pre>
function SuperClass(){
  this.val=true;
  this.o={
    a:1    
 }
};

function SubClass(){
  SuperClass.call(this)
}

var sub1=new SubClass();
sub1.val//true
sub1.o.a=2

var sub2=new SubClass();
console.log(sub2.o.a)//1
</pre>

<p>当我们实例化子类的时候，执行一遍父类的函数，利用call函数更改为子类的作用域，那么在this添加属性的时候就会对子类的实例化对象添加属性了，这样创建的实例就会单独拥有一份属性了，而不能共用，<br>这样就违背了代码复用的原则。</p>
<h3 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h3><p>所以结合前两种模式的优点，就有了组合继承。<br><a id="more"></a></p>
<pre>
function SuperClass(type){
  this.val=type;
  this.o={
    a:1    
 }
};

SuperClass.prototype.getVal=function(){
  console.log(this.val)
}

function SubClass(type){
  SuperClass.call(this,type)
}

SubClass.prototype=new SuperClass();
</pre>

<p>这样就能共用方法和享有自己的副本了，但是还是有点瑕疵，为什么呢？因为构造函数被调用了两次，这样会多出来一个副本，这样不清真，也不完美。</p>
<h3 id="4-原形式继承"><a href="#4-原形式继承" class="headerlink" title="4.原形式继承"></a>4.原形式继承</h3><p>后来，有个dalao提出一句话，书上有翻译，但是没看懂，就不打了，直接上代码</p>
<pre>
function inheritObject(o){
  function F(){}
  F.prototype=o;
  return new F();
}

SubClass.prototype=inheritObject(SuperClass.prototype);
SubClass.prototype.constructor=subClass
</pre>

<p>因为F类构造函数没有内容，所以更纯净，开销更小。所以人们会借用这种方式来实现对prototype的继承</p>
<h2 id="二丶原型链"><a href="#二丶原型链" class="headerlink" title="二丶原型链"></a>二丶原型链</h2><p>原型链我并没有过多的了解，也就只是一个概念吧，对象进行搜索属性的概念。<br>对象在查找属性的时候会依次往下搜寻，从构造函数的属性开始往下找，所以为什么当我们在构造函数和prototype的key相同时，输出的是构造函数的值。如果没有，就往__proto__找，如果有继承了父类，继续往实例的__proto__.__proto__(父类的实例)寻找我们需要的属性，直到Object.prototype.__proto__(null)。</p>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li>我们在通过点(.)寻找对象属性时能也能看到一些实例化对象后Object共有的方法toString，valueOf啊,这些就是原型链的概念了也就是Object.prototype的方法。他们能访问到，但是不能被枚举出来，所以和普通的对象使用点(.)添加属性不一样，应该是比较底层的方法定义出来的。es5有个方法Object.defineProperty可以对对象的属性定义更多的操作，列如可否枚举，是否能够被修改，还有强大的getter，setter方法能够被现流行的框架用于实现数据绑定。</li>
<li><p>对于上面的原型式继承，为了规范，出现了一个新的方法Object.create，这和原型式继承的实现是一样的，可以看看MDN官方文档对于低版本浏览器给出的polyfill</p>
<pre>
if (typeof Object.create !== "function") {
  Object.create = function (proto, propertiesObject) {
      if (!(proto === null || typeof proto === "object" || typeof proto === "function")) {
          throw TypeError('Argument must be an object, or null');
      }
      var temp = new Object();
      temp.__proto__ = proto;
      if(typeof propertiesObject ==="object")
          Object.defineProperties(temp,propertiesObject);
      return temp;
  };
}
</pre>
</li>
<li><p>对象拷贝，Object.assgin能实现多继承的概念，并且也是深拷贝，但是只能也只能达到一级的深拷贝。JSON.parse(JSON.stringify(obj))能实现到深拷贝。但是两者都不会把__proto__复制到新对象里</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原型，原型链，继承&quot;&gt;&lt;a href=&quot;#原型，原型链，继承&quot; class=&quot;headerlink&quot; title=&quot;原型，原型链，继承&quot;&gt;&lt;/a&gt;原型，原型链，继承&lt;/h1&gt;&lt;p&gt;最近在看js高级程序设计，以前对prototype不了解，重新看完书后得到了很多东西不止是原型这块知识点，还有一些细节点，写法上的性能优化、一些方法的处理机制，这里就不说明了。就来把自己所知道的原型来梳理一下吧  &lt;/p&gt;
&lt;h2 id=&quot;一丶原型是什么&quot;&gt;&lt;a href=&quot;#一丶原型是什么&quot; class=&quot;headerlink&quot; title=&quot;一丶原型是什么&quot;&gt;&lt;/a&gt;一丶原型是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在js里，万物皆对象，Function也是对象，在使用字面量创建基本类型的时候也会实例化成一个对象。  我们在创建对象的时候可以看到，对象里会有一个属性__proto__，可称为隐式原型。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在函数(Function)这个对象中，还有一个特有的属性，prototype(显式原型)。函数的prototype是一个指针，指向一个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
function a(){};
a.prototype={};
new a().__proto__ === a.prototype; //true
&lt;/pre&gt;

&lt;p&gt;这里就能知道一个对象的隐式原型指向和构造该对象的构造函数的原型的指向是一样的，这样就保证了能够访问到构造函数原型时定义的方法了。在对象__proto__属性里能看到里面有许多的方法还有一个属性constructor，指向我们的构造函数。  &lt;/p&gt;
&lt;h2 id=&quot;二丶继承&quot;&gt;&lt;a href=&quot;#二丶继承&quot; class=&quot;headerlink&quot; title=&quot;二丶继承&quot;&gt;&lt;/a&gt;二丶继承&lt;/h2&gt;&lt;p&gt;js没有现有的继承的机制，但是可以通过其他的方式来实现继承，比如常见的类式继承，利用原型的特性实现继承&lt;/p&gt;
&lt;h3 id=&quot;1-类式继承&quot;&gt;&lt;a href=&quot;#1-类式继承&quot; class=&quot;headerlink&quot; title=&quot;1.类式继承&quot;&gt;&lt;/a&gt;1.类式继承&lt;/h3&gt;&lt;pre&gt;
function SuperClass(){
  this.val=true    
};
SuperClass.prototype.getVal=function(){
  console.log(this.val)
}
SuperClass.prototype.o={
  a:1
}

function SubClass(){
  this.val=false
}

SubClass.prototype=new SuperClass();
SubClass.prototype.constructor=SubClass;
var sub1=new SubClass();
sub1.getVal(); //false;
sub1.o.a=2;

console.log(new SubClass().o.a)//2
&lt;/pre&gt;

&lt;p&gt;类的原型对象的作用就是为类的原型添加共有方法。当子类的原型对象指向实例化一个父类的时候，再去实例化这个子类的时候，实例化后的对象里的__proto__就是我们父类的prototype对象，所以就能够访问到父类原型对象的方法和构造属性了。&lt;br&gt;但是有个缺点，因为prototype是指向对象，对象和基本值不一样，是引用，所以我们更改其中的属性也就是相当于更改父类的属性，就会相互影响。&lt;br&gt;当然也可以通过父类的原型对象for-in循环复制到子类里，只要加上hasownproperty的判断就好啦。&lt;/p&gt;
&lt;h3 id=&quot;2-构造函数继承&quot;&gt;&lt;a href=&quot;#2-构造函数继承&quot; class=&quot;headerlink&quot; title=&quot;2.构造函数继承&quot;&gt;&lt;/a&gt;2.构造函数继承&lt;/h3&gt;&lt;p&gt;js是灵活的，我们可以使用其他继承方式来解决引用问题，比如常见的构造函数继承&lt;/p&gt;
&lt;pre&gt;
function SuperClass(){
  this.val=true;
  this.o={
    a:1    
 }
};

function SubClass(){
  SuperClass.call(this)
}

var sub1=new SubClass();
sub1.val//true
sub1.o.a=2

var sub2=new SubClass();
console.log(sub2.o.a)//1
&lt;/pre&gt;

&lt;p&gt;当我们实例化子类的时候，执行一遍父类的函数，利用call函数更改为子类的作用域，那么在this添加属性的时候就会对子类的实例化对象添加属性了，这样创建的实例就会单独拥有一份属性了，而不能共用，&lt;br&gt;这样就违背了代码复用的原则。&lt;/p&gt;
&lt;h3 id=&quot;3-组合继承&quot;&gt;&lt;a href=&quot;#3-组合继承&quot; class=&quot;headerlink&quot; title=&quot;3.组合继承&quot;&gt;&lt;/a&gt;3.组合继承&lt;/h3&gt;&lt;p&gt;所以结合前两种模式的优点，就有了组合继承。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>回流与重绘</title>
    <link href="http://yoursite.com/2017/03/08/Repaint-and-Reflow/"/>
    <id>http://yoursite.com/2017/03/08/Repaint-and-Reflow/</id>
    <published>2017-03-08T03:15:51.000Z</published>
    <updated>2017-09-09T08:56:48.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reflow和Repaint的基本认识"><a href="#Reflow和Repaint的基本认识" class="headerlink" title="Reflow和Repaint的基本认识"></a>Reflow和Repaint的基本认识</h1><p>重绘(repaints)是一个元素外观的改变所触发的浏览器行为，例如改变vidibility，color等，重绘并不一定会导致回流</p>
<p>回流(reflow) 指的就是浏览器为了重新渲染部分或者全部文档而重新计算元素的位置和几何结构过程，就比如砍掉某节点元素或者改变位置或者大小也可能会造成父级元素以及子元素也产生回流</p>
<p>重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性，回流更是性能的关键，某一块元素的变化可能会造成部分区域或者整个页面的布局发生变化</p>
<p>所以我们在写js或者css的时候需要尽量把回流对性能的影响降到最低 </p>
<h3 id="dom优化"><a href="#dom优化" class="headerlink" title="dom优化"></a>dom优化</h3><p>1.在修改元素样式的时候，通过修改classname名获取样式，也就是多次dom修改合并成一次  </p>
<pre>dom.style.color='#cccccc';
dom.style.top='10px';

////

dom.className='m';
.m{
color:#cccccc;
top:10px;
}</pre>

<p>我们会用dom碎片进行组合再添加到整个dom上，因为这样仅导致一个回流。所以，style属性设置也一样会导致回流，避免设置多级内联样式。当元素获取外部类的样式时只会产生一次回流。</p>
<p>2.动画效果的position值为fixed或者absolute<br>动画效果在移动过程不会影响其他元素布局，不会导致其他元素的回流<br><a id="more"></a><br>3.使用缓存，缓存临时节点，不要每次都去获取</p>
<p>4.操作dom可以先把dom节点删除或隐藏，隐藏的节点不会重排</p>
<p>5.批量增加尽量使用innerhtml，多次添加的时候innerhtml要好过appendchild</p>
<p>6.有些浏览器会对重排做优化，比如等一个线程结束或足够数量的变化发生再进行处理。但浏览器为了得到某些属性值的正确性也会重排,这些属性有：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight。所以多次使用应该使用缓存</p>
<h3 id="css优化"><a href="#css优化" class="headerlink" title="css优化"></a>css优化</h3><p>多写类选择器。通配符不说了，还有一些统统padding/margin：0，滥写css reset。选择器叠层也不要太复杂毕竟是从右往左找</p>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>dom操作肯定是不可避免的，框架本身也避免不了dom操作，只能把代价减低,类似react就是使用v-dom来对dom结构进行比较，对js对象进行操作，修改部分节点，利用已有节点修改有新节点才创建。浏览器对于dom操作肯定会做优化的，合并批处理什么的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Reflow和Repaint的基本认识&quot;&gt;&lt;a href=&quot;#Reflow和Repaint的基本认识&quot; class=&quot;headerlink&quot; title=&quot;Reflow和Repaint的基本认识&quot;&gt;&lt;/a&gt;Reflow和Repaint的基本认识&lt;/h1&gt;&lt;p&gt;重绘(repaints)是一个元素外观的改变所触发的浏览器行为，例如改变vidibility，color等，重绘并不一定会导致回流&lt;/p&gt;
&lt;p&gt;回流(reflow) 指的就是浏览器为了重新渲染部分或者全部文档而重新计算元素的位置和几何结构过程，就比如砍掉某节点元素或者改变位置或者大小也可能会造成父级元素以及子元素也产生回流&lt;/p&gt;
&lt;p&gt;重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性，回流更是性能的关键，某一块元素的变化可能会造成部分区域或者整个页面的布局发生变化&lt;/p&gt;
&lt;p&gt;所以我们在写js或者css的时候需要尽量把回流对性能的影响降到最低 &lt;/p&gt;
&lt;h3 id=&quot;dom优化&quot;&gt;&lt;a href=&quot;#dom优化&quot; class=&quot;headerlink&quot; title=&quot;dom优化&quot;&gt;&lt;/a&gt;dom优化&lt;/h3&gt;&lt;p&gt;1.在修改元素样式的时候，通过修改classname名获取样式，也就是多次dom修改合并成一次  &lt;/p&gt;
&lt;pre&gt;dom.style.color=&#39;#cccccc&#39;;
dom.style.top=&#39;10px&#39;;

////

dom.className=&#39;m&#39;;
.m{
color:#cccccc;
top:10px;
}&lt;/pre&gt;

&lt;p&gt;我们会用dom碎片进行组合再添加到整个dom上，因为这样仅导致一个回流。所以，style属性设置也一样会导致回流，避免设置多级内联样式。当元素获取外部类的样式时只会产生一次回流。&lt;/p&gt;
&lt;p&gt;2.动画效果的position值为fixed或者absolute&lt;br&gt;动画效果在移动过程不会影响其他元素布局，不会导致其他元素的回流&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数制</title>
    <link href="http://yoursite.com/2016/12/14/numerical-system/"/>
    <id>http://yoursite.com/2016/12/14/numerical-system/</id>
    <published>2016-12-14T02:38:16.000Z</published>
    <updated>2017-03-08T03:06:30.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数制"><a href="#数制" class="headerlink" title="数制"></a>数制</h1><p>数制是用一组固定的数宇和一套统一的规则来表示数的方祛。数值的计算一般都是近位计算。按照进位的规则进行计数的数制，称为进位计数制。常见的进位计数制有二进制，八进制，十六进制，十进制就是我们生活当中通用的数制，满十进一</p>
<p><strong>进位计数制有两个基本要素：基数和权。</strong></p>
<h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><p>基数是指某进位计数制中允许使用的数字的个数。</p>
<ul>
<li>二进制基数就是2，八进制基数就是8</li>
<li>大于10的基数当单个数字超过9的时候会用其他符号表示，例如在十六进制中10用a表示，直到F(15)</li>
</ul>
<h4 id="权"><a href="#权" class="headerlink" title="权"></a>权</h4><p>以基数为底，以某一数字所在位置的序号为指数的幂，称为该数字在该位置的权。</p>
<p>以十进制数123.45来说每个数字的权都不同</p>
<ul>
<li>小数点从左往右边的权分别为10(基数)^0，10^1，10^2</li>
<li>小数点从左往右边的权分别为10^-1，10^-2</li>
</ul>
<h1 id="数制计算方法"><a href="#数制计算方法" class="headerlink" title="数制计算方法"></a>数制计算方法</h1><p>在c语言中，为了表示一个数字为八进制，会在其加个前缀0，比如050就表示42，前缀0X代表十六进制数字<br><a id="more"></a><br>1.转十进制的方法通常为:从左到右，当前位数值*权相加</p>
<ul>
<li>二进制的1101: <code>(1*2^3)+(1*2^2)+(0*2^1)+(1*2^0)=13</code></li>
<li>八进制的426:  <code>(4*8^2)+(2*8^1)+(6*8^0)=278</code></li>
<li>十六进制1af:  <code>(1*16^2)+(10*16^1)+(15*16^0)=431</code></li>
</ul>
<p>2.十进制转其他进制的算法：数值除以基数，取商直到比基数小，再倒取余数</p>
<ul>
<li><p>十进制33转二进制：<br><pre>33/2=16……1<br>16/2=8……0<br>8/2=4……0<br>4/2=2……0<br>2/2=1……0</pre><br>倒取余数后二进制的33就表示为100001  </p>
</li>
<li><p>同理十进制674转八进制：<br><pre>674/8=84……2<br>84/8=10……4<br>10/8=1……2<br></pre><br>倒取余数后八进制的674就表示为1242</p>
</li>
<li><p>十进制685转十六进制:（商）+基数 * 小数<br><pre>685/16=42.8125<br>42/16=2.625<br></pre><br>（2）+（0.625*16）+（0.8125*16）=2 + 10(a) +13(d)<br>所以最后转换的十六进制就为2ad</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数制&quot;&gt;&lt;a href=&quot;#数制&quot; class=&quot;headerlink&quot; title=&quot;数制&quot;&gt;&lt;/a&gt;数制&lt;/h1&gt;&lt;p&gt;数制是用一组固定的数宇和一套统一的规则来表示数的方祛。数值的计算一般都是近位计算。按照进位的规则进行计数的数制，称为进位计数制。常见的进位计数制有二进制，八进制，十六进制，十进制就是我们生活当中通用的数制，满十进一&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进位计数制有两个基本要素：基数和权。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;基数&quot;&gt;&lt;a href=&quot;#基数&quot; class=&quot;headerlink&quot; title=&quot;基数&quot;&gt;&lt;/a&gt;基数&lt;/h4&gt;&lt;p&gt;基数是指某进位计数制中允许使用的数字的个数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制基数就是2，八进制基数就是8&lt;/li&gt;
&lt;li&gt;大于10的基数当单个数字超过9的时候会用其他符号表示，例如在十六进制中10用a表示，直到F(15)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;权&quot;&gt;&lt;a href=&quot;#权&quot; class=&quot;headerlink&quot; title=&quot;权&quot;&gt;&lt;/a&gt;权&lt;/h4&gt;&lt;p&gt;以基数为底，以某一数字所在位置的序号为指数的幂，称为该数字在该位置的权。&lt;/p&gt;
&lt;p&gt;以十进制数123.45来说每个数字的权都不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小数点从左往右边的权分别为10(基数)^0，10^1，10^2&lt;/li&gt;
&lt;li&gt;小数点从左往右边的权分别为10^-1，10^-2&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数制计算方法&quot;&gt;&lt;a href=&quot;#数制计算方法&quot; class=&quot;headerlink&quot; title=&quot;数制计算方法&quot;&gt;&lt;/a&gt;数制计算方法&lt;/h1&gt;&lt;p&gt;在c语言中，为了表示一个数字为八进制，会在其加个前缀0，比如050就表示42，前缀0X代表十六进制数字&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机原理" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="数值" scheme="http://yoursite.com/tags/%E6%95%B0%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>字符编码</title>
    <link href="http://yoursite.com/2016/11/28/character-encoding/"/>
    <id>http://yoursite.com/2016/11/28/character-encoding/</id>
    <published>2016-11-28T05:56:21.000Z</published>
    <updated>2016-12-23T08:09:57.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p>在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。</p>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。<br><a id="more"></a><br>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，这是一种所有符号的编码</p>
<p>Unicode是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字”严”。具体的符号对应表，可以查询unicode.org，或者专门的汉字对应表。</p>
<h3 id="utf-8"><a href="#utf-8" class="headerlink" title="utf-8"></a>utf-8</h3><p>UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。<br>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。<br>UTF-8的编码规则很简单，只有二条：  </p>
<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。<br>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>(\/*)[u4E00-\u9FA5].+|(\d.)?[\u4e00-\u9fa5].+|\w.+\s[\u4e00-\u9fa5].+<br>\/*(\s.)?((\r\n).<em>){????}\</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h2&gt;&lt;h3 id=&quot;ASCII码&quot;&gt;&lt;a href=&quot;#ASCII码&quot; class=&quot;headerlink&quot; title=&quot;ASCII码&quot;&gt;&lt;/a&gt;ASCII码&lt;/h3&gt;&lt;p&gt;在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。&lt;/p&gt;
&lt;h3 id=&quot;Unicode&quot;&gt;&lt;a href=&quot;#Unicode&quot; class=&quot;headerlink&quot; title=&quot;Unicode&quot;&gt;&lt;/a&gt;Unicode&lt;/h3&gt;&lt;p&gt;世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机原理" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="字符编码" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
